# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Remove trailing /'s from paths 
GET         /*path/                                                       controllers.Application.untrail(path: String)

# Consent Form
GET         /consent                                                      controllers.Consent.consent(goTo: Option[String], error: Option[String])
POST        /consent                                                      controllers.Consent.consentSubmit(goTo: Option[String])
GET         /noconsent                                                    controllers.Consent.noConsent
POST        /revokeconsent                                                controllers.Consent.revokeConsent

# Home page
GET         /                                                             controllers.Home.index
GET         /user                                                         controllers.Home.userInfo

# Organizations
GET         /orgs                                                         controllers.organization.OrganizationsController.list
GET         /orgs/:o                                                      controllers.organization.OrganizationsController.view(o: OrganizationId)

# Courses
GET         /orgs/:o/courses                                              controllers.organization.CoursesController.list(o: OrganizationId)
GET         /orgs/:o/courses/create                                       controllers.organization.CoursesController.createForm(o: OrganizationId)
POST        /orgs/:o/courses                                              controllers.organization.CoursesController.createSubmit(o: OrganizationId)
GET         /orgs/:o/courses/:c                                           controllers.organization.CoursesController.view(o: OrganizationId, c: CourseId)
POST        /orgs/:o/courses/:c/join                                      controllers.organization.CoursesController.join(o: OrganizationId, c: CourseId)

# Course Quizzes
GET         /orgs/:o/courses/:c/quizzes/create                            controllers.question.QuizzesController.createForm(o: OrganizationId, c: CourseId)
POST        /orgs/:o/courses/:c/quizzes                                   controllers.question.QuizzesController.createSubmit(o: OrganizationId, c: CourseId)
GET         /orgs/:o/courses/:c/quizzes/:z                                controllers.question.QuizzesController.view(o: OrganizationId, c: CourseId, z: QuizId, a: Option[models.support.AnswerId])
POST        /orgs/:o/courses/:c/quizzes/:z/rename                         controllers.question.QuizzesController.rename(o: OrganizationId, c: CourseId, z: QuizId)

# Course Quizzes Questions
GET         /orgs/:o/courses/:c/quizzes/:z/questions/:q                   controllers.question.QuestionsController.view(o: OrganizationId, c: CourseId, z: QuizId, q: QuestionId)
POST        /orgs/:o/courses/:c/quizzes/:z/questions/derivative           controllers.question.QuestionsController.createDerivative(o: OrganizationId, c: CourseId, z: QuizId)
POST        /orgs/:o/courses/:c/quizzes/:z/questions/tangent              controllers.question.QuestionsController.createTangent(o: OrganizationId, c: CourseId, z: QuizId)
POST        /orgs/:o/courses/:c/quizzes/:z/questions/:q/remove            controllers.question.QuestionsController.remove(o: OrganizationId, c: CourseId, z: QuizId, q: QuestionId)

# Course Quizzes Answers
GET         /orgs/:o/courses/:c/quizzes/:z/questions/:q/answers/:a        controllers.question.derivative.AnswersController.view(o: OrganizationId, c: CourseId, z: QuizId, q: QuestionId, a: AnswerId)
POST        /orgs/:o/courses/:c/quizzes/:z/questions/:q/answers           controllers.question.derivative.AnswersController.create(o: OrganizationId, c: CourseId, z: QuizId, q: QuestionId)

# Games for Courses
GET         /orgs/:o/courses/:c/games/find                                controllers.game.GamesController.findPlayer(o: OrganizationId, c: CourseId)
POST        /orgs/:o/courses/:c/games/request                             controllers.game.GamesController.requestGame(o: OrganizationId, c: CourseId)

# Games
GET         /games/:g                                                     controllers.game.GamesController.game(g: GameId, a: Option[models.support.AnswerId])
POST        /games/:g/respond                                             controllers.game.GamesController.respond(g: GameId)
POST        /games/:g/questions/createRequestor                           controllers.game.GamesRequestorController.createQuestion(g: GameId)
POST        /games/:g/questions/removeRequestor                           controllers.game.GamesRequestorController.removeQuestion(g: GameId)
POST        /games/:g/finalizeQuizRequestor                               controllers.game.GamesRequestorController.finalizeCreatedQuiz(g: GameId)
POST        /games/:g/finalizeAnswersRequestor                            controllers.game.GamesRequestorController.finalizeAnswers(g: GameId)
POST        /games/:g/questions/createRequestee                           controllers.game.GamesRequesteeController.createQuestion(g: GameId)
POST        /games/:g/questions/removeRequestee                           controllers.game.GamesRequesteeController.removeQuestion(g: GameId)
POST        /games/:g/finalizeQuizRequestee                               controllers.game.GamesRequesteeController.finalizeCreatedQuiz(g: GameId)
POST        /games/:g/finalizeAnswersRequestee                            controllers.game.GamesRequesteeController.finalizeAnswers(g: GameId)
# Games Questions
GET         /games/:g/questions/:q                                        controllers.game.GamesController.question(g: GameId, q: QuestionId)
GET         /games/:g/questions/:q/:a                                     controllers.game.GamesController.answer(g: GameId, q: QuestionId, a: AnswerId)
POST        /games/:g/questions/:q/requestee                              controllers.game.GamesRequesteeController.answerQuestion(g: GameId, q: QuestionId)
POST        /games/:g/questions/:q/requestor                              controllers.game.GamesRequestorController.answerQuestion(g: GameId, q: QuestionId)
# Review A Game when completed
GET         /games/:g/quizzes/:z                                          controllers.game.GamesController.reviewQuiz(g: GameId, z: QuizId)

# Question Difficulty service (ajax)
POST        /questiondifficulty                                           controllers.question.QuestionsController.questionDifficulty

# ======== START Routes for Secure Social ========
# Login page
GET         /login                                                        securesocial.controllers.LoginPage.login
GET         /logout                                                       securesocial.controllers.LoginPage.logout
# User Registration and password handling 
GET         /signup                                                       securesocial.controllers.Registration.startSignUp
POST        /signup                                                       securesocial.controllers.Registration.handleStartSignUp
GET         /signup/:token                                                securesocial.controllers.Registration.signUp(token)
POST        /signup/:token                                                securesocial.controllers.Registration.handleSignUp(token)
GET         /reset                                                        securesocial.controllers.Registration.startResetPassword
POST        /reset                                                        securesocial.controllers.Registration.handleStartResetPassword
GET         /reset/:token                                                 securesocial.controllers.Registration.resetPassword(token)
POST        /reset/:token                                                 securesocial.controllers.Registration.handleResetPassword(token)
GET         /password                                                     securesocial.controllers.PasswordChange.page
POST        /password                                                     securesocial.controllers.PasswordChange.handlePasswordChange
# Providers entry points
GET         /authenticate/:provider                                       securesocial.controllers.ProviderController.authenticate(provider)
POST        /authenticate/:provider                                       securesocial.controllers.ProviderController.authenticateByPost(provider)
GET         /not-authorized                                               securesocial.controllers.ProviderController.notAuthorized
# ======== END Routes for Secure Social ========

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                                 controllers.Assets.at(path="/public", file)

# If a path is not valid backtrack until we hit something that is
GET         /*path                                                        controllers.Application.backTrack(path: String)
