# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Remove trailing /'s from paths 
GET    /*path/                               controllers.Application.untrail(path: String)

# Home page
GET    /                                     controllers.Application.index

# Equation pages
GET    /equation                             controllers.EquationController.equations
POST   /equation                             controllers.EquationController.newEquation
POST   /equation/:id/delete                  controllers.EquationController.deleteEquation(id: Long)

# Derivative question pages
GET    /selfquiz                             controllers.question.derivative.QuestionController.selfQuiz
GET    /selfquiz/question                    controllers.question.derivative.QuestionController.questions
GET    /selfquiz/question/:qid               controllers.question.derivative.QuestionController.question(qid: Long, sid: Option[Long])
POST   /selfquiz/question                    controllers.question.derivative.QuestionController.newQuestion
POST   /selfquiz/question/:qid/delete        controllers.question.derivative.QuestionController.deleteQuestion(qid: Long) 

# Derivative answer pages
GET    /selfquiz/question/:qid/answer        controllers.question.derivative.AnswerController.answers(qid: Long)
GET    /selfquiz/question/:qid/answer/:aid   controllers.question.derivative.AnswerController.answer(qid: Long, aid : Long, sid: Option[Long])
POST   /selfquiz/question/:qid/answer/       controllers.question.derivative.AnswerController.newAnswer(qid: Long, sid: Option[Long])

# Derivative queston set pages
GET    /selfquiz/questionset                 controllers.question.derivative.QuizController.sets
GET    /selfquiz/questionset/create          controllers.question.derivative.QuizController.setCreate
GET    /selfquiz/questionset/:sid            controllers.question.derivative.QuizController.setAnswer(sid: Long)
GET    /selfquiz/questionset/:sid/edit       controllers.question.derivative.QuizController.setEdit(sid: Long)
POST   /selfquiz/questionset                 controllers.question.derivative.QuizController.newSet
POST   /selfquiz/questionset/:sid/update     controllers.question.derivative.QuizController.updateSet(sid: Long)

# START Routes for Secure Social
# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout
# User Registration and password handling 
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange
# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized
# END Routes for Secure Social


# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file                         controllers.Assets.at(path="/public", file)